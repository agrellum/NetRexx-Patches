filetype: Icon

detect:
    filename: "(\\.icn$|\\.gd$)"

rules:

    # operators
    - symbol.operator: "[=\\+\\-\\*/<>@~&%\\|!\\?\\^\\.:\\\\]+"

    # precedence/associativity/usage

    # !
    # 12 unary with string, list
    # 11 binary left with other

    # %
    #  9 binary left witn numeric

    # &
    #  1 binary left with other

    # *
    # 12 unary with string, cset, list, co-expression
    #  9 binary left with numeric

    # **
    #  9 binary left with cset, set

    # +
    #  9 binary left with numeric
    #  8 binary left with numeric

    # ++
    #  8 binary left with cset, set

    # -
    # 12 unary with numeric
    #  8 binary left with numeric

    # --
    #  8 binary left with cset, set

    # .
    # 12 unary with other

    # /
    # 12 unary with other
    #  9 binary left with numeric

    # :=
    #  3 binary right with other

    # :=:
    #  3 binary right with other

    # <
    #  6 binary left with numeric

    # <-
    #  3 binary right with other

    # <->
    #  3 binary right with other

    # <<
    #  6 binary left with string

    #  <<=
    #  6 binary left with string

    # <=
    #  6 binary left with numeric

    # =
    # 12 unary with string
    #  6 binary left with numeric

    # ==
    #  6 binary left with string

    # ===
    #  6 binary left with other

    # >
    #  6 binary left with numeric

    # >=
    #  6 binary left with numeric

    # >>
    #  6 binary left with string

    # >>=
    #  6 binary left with string

    # ?
    # 12 unary with numeric, string, list
    #  2 binary left with string

    # @
    # 12 unary with co-expression
    # 11 binary left with co-expression

    # \
    # 12 unary with other
    # 11 binary left with other

    # ^
    # 12 unary with co-expression
    # 10 binary right with numeric

    # e1_to_e2
    #  4 left, binary or ternary with other

    # e1_to_e2_by_e3
    #  4 left, binary or ternary with other

    # not
    # 12 unary with other

    # op:=
    #  3 binary right other

    # |
    # 12 unary with other
    #  5 binary left with other

    # ||
    #  7 binary left with string

    # |||
    #  7 binary left with list

    # ~
    # 12 unary with cset

    # ~=
    #  6 binary left with numeric

    # ~==
    #  6 binary left with string

    # ~===
    #  6 binary left with other

    # enclosing symbols
    - symbol.brackets: "[(){}]|\\[|\\]"

    # other symbols
    - symbol: ([,;])

    # firsts
    - blue: "\\b(import|initial|invocable)\\b"

    # colorize names of class, procedure, record and method.
    # reset class/procedure/record/method color below
    - special: "class +[A-Za-z0-9|_]+ *( +[A-Za-z0-9.]+)?"
    - special: "procedure +[A-Za-z0-9|_]+ *( +[A-Za-z0-9.]+)?"
    - special: "record +[A-Za-z0-9|_]+ *( +[A-Za-z0-9.]+)?"
    - special: "method +[A-Za-z0-9|_]+ *( +[A-Za-z0-9.]+)?"

    # flow/other
    - special: "(?i)\\b(break|by|case|catch|continue|create|default|do|else)\\b"
    - special: "(?i)\\b(every|extends|fail|if|lambda|link|main|next|nil|not)\\b"
    - special: "(?i)\\b(of|repeat|return|select|succeed|suspend|then|to)\\b"
    - special: "(?i)\\b(until|while|with|yield)\\b"

    # preprocessor
    # SKIP using leading $ to avoid bug:
    # https://github.com/zyedidia/micro/issues/1457
    # KEEP color scheme same as flow/other to match 'if' 'else'
    - special: "(?i)\\b(define|else|elsif|encoding|endif)\\b"
    - special: "(?i)\\b(error|if|ifdef|ifndef|include)\\b"
    - special: "(?i)\\b(line|load|uload|undef)\\b"

    # builtin functions
    - statement.built_in: "(?i)\\b(abs|acos|any|asin|atan|back|bal|center|char)\\b"
    - statement.built_in: "(?i)\\b(chdir|classof|clear|close|coact|cocopy|cofail)\\b"
    - statement.built_in: "(?i)\\b(collect|copy|cos|cset|delay|delete|detab)\\b"
    - statement.built_in: "(?i)\\b(display|dtor|entab|errorclear|exit|exp)\\b"
    - statement.built_in: "(?i)\\b(fatalerr|find|flush|function|get|getch|getche)\\b"
    - statement.built_in: "(?i)\\b(getenv|iand|icom|image|insert|integer|ior|is)\\b"
    - statement.built_in: "(?i)\\b(ishift|ixor|kbhit|key|keyof|keyval|left|list)\\b"
    - statement.built_in: "(?i)\\b(log|many|map|match|max|member|min|move|name)\\b"
    - statement.built_in: "(?i)\\b(numeric|open|ord|pop|pos|proc|pull|push|put)\\b"
    - statement.built_in: "(?i)\\b(read|reads|real|remove|rename|repl|reverse)\\b"
    - statement.built_in: "(?i)\\b(right|rtod|runerr|seek|seq|serial|set|sin)\\b"
    - statement.built_in: "(?i)\\b(sort|sortf|sqrt|stop|string|syserr|system|tab)\\b"
    - statement.built_in: "(?i)\\b(table|tan|text|trim|type|uchar|ucs|upto)\\b"
    - statement.built_in: "(?i)\\b(variable|weakref|weakrefval|where|write|writes)\\b"

    # keywords
    - statement.reserved: "\\&(?i)\\b(ascii|break|clock|cset|current|date|dateline)\\b"
    - statement.reserved: "\\&(?i)\\b(digits|dump|e|errorcoexpr|errornumber)\\b"
    - statement.reserved: "\\&(?i)\\b(errortext|errorvalue|errout|fail|features)\\b"
    - statement.reserved: "\\&(?i)\\b(file|handler|host|input|lcase|letters|level)\\b"
    - statement.reserved: "\\&(?i)\\b(line|lpress|main|maxlevel|no|null|output)\\b"
    - statement.reserved: "\\&(?i)\\b(phi|pi|pos|progname|program|random|rpress)\\b"
    - statement.reserved: "\\&(?i)\\b(source|subject|time|trace|ucase|uset|version)\\b"
    - statement.reserved: "\\&(?i)\\b(why|x|y|yes)\\b"

    # code blocks, field modifiers
    - magenta: "(?i)\\b(class|procedure|record|method)\\b"
    - magenta: "(?i)\\b(abstract|const|end|final|global|local|native)\\b"
    - magenta: "(?i)\\b(optional|override|package|private|protected)\\b"
    - magenta: "(?i)\\b(public|readable|static)\\b"

    # strings using double quote character
    - constant.string:
        start: "\""
        end: "\""
        skip: "\\\\."
        rules:
            # escape sequences
            - constant.specialChar: "\\\\([bdeflnrtv]|'|\\\"|\\\\)"
            # highlight numbers inside string
            - constant.number: "\\b[+-]?([0-9]+(\\.[0-9]+)?|\\.[0-9]+|\\.)([eE][+-]?[0-9]+)?[i]?\\b"
            # highlight binary number inside string
            - constant.specialChar: "\\b(([0-9])+([bB])+([0-1]+))\\b"
            # highlight hex number inside string
            - constant.specialChar: "\\\\x[A-Fa-f0-9]{2}"
            - constant.specialChar: "\\b(([0-9])+([xX])+([A-Fa-f0-9]+))\\b"
            # highlight unicode number inside string
            - constant.specialChar: "\\\\[u][A-Fa-f0-9]{4}"
            - constant.specialChar: "\\\\[U][A-Fa-f0-9]{6}"
            - constant.specialChar: "\\\\."

    #  strings using single quote character
    - constant.string:
        start: "\'"
        end: "\'"
        skip: "\\\\."
        rules:
            # escape sequences
            - constant.specialChar: "\\\\([bdeflnrtv]|'|\\\"|\\\\)"
            # highlight numbers inside string
            - constant.number: "\\b[+-]?([0-9]+(\\.[0-9]+)?|\\.[0-9]+|\\.)([eE][+-]?[0-9]+)?[i]?\\b"
            # highlight binary number inside string
            - constant.specialChar: "\\b(([0-9])+([bB])+([0-1]+))\\b"
            # highlight hex number inside string
            - constant.specialChar: "\\\\x[A-Fa-f0-9]{2}"
            # highlight unicode number inside string
            - constant.specialChar: "\\\\[u][A-Fa-f0-9]{4}"
            - constant.specialChar: "\\\\[U][A-Fa-f0-9]{6}"
            - constant.specialChar: "\\\\."

    # escape sequences
    # SKIP USING THEM OUTSIDE OF QUOTES
    # Keep ICON's use of \(non-null test) easy to see.
    #- constant.specialChar: "\\\\([bdeflnrtv]|'|\\\"|\\\\)"

    # numbers
    - constant.number: "\\b[+-]?([0-9]+(\\.[0-9]+)?|\\.[0-9]+|\\.)([eE][+-]?[0-9]+)?[i]?\\b"

    # binary
    - constant.specialChar: "\\b(([0-9])+([bB])+([0-1]+))\\b"

    # hex
    - constant.specialChar: "\\\\x[A-Fa-f0-9]{2}"

    # unicode
    - constant.specialChar: "\\\\u[A-Fa-f0-9]{4}"
    - constant.specialChar: "\\\\U[A-Fa-f0-9]{6}"

    # comments
    - brightcyan:
        start: "#"
        end: "$"
        rules:
            - todo: "(TODO|XXX|FIXME):?"

