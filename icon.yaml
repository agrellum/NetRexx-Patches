filetype: Icon

detect:
    filename: "(\\.icn$|\\.gd$)"

rules:

    # operators
    - symbol.operator: "[=\\+\\-\\*/<>@~&%\\|!\\?\\^\\.:\\\\]+"

    # precedence/associativity/usage

    # !
    # 12 unary with string, list
    # 11 binary left with other

    # %
    #  9 binary left witn numeric

    # &
    #  1 binary left with other

    # *
    # 12 unary with string, cset, list, co-expression
    #  9 binary left with numeric

    # **
    #  9 binary left with cset, set

    # +
    #  9 binary left with numeric
    #  8 binary left with numeric

    # ++
    #  8 binary left with cset, set

    # -
    # 12 unary with numeric
    #  8 binary left with numeric

    # --
    #  8 binary left with cset, set

    # .
    # 12 unary with other

    # /
    # 12 unary with other
    #  9 binary left with numeric

    # :=
    #  3 binary right with other

    # :=:
    #  3 binary right with other

    # <
    #  6 binary left with numeric

    # <-
    #  3 binary right with other

    # <->
    #  3 binary right with other

    # <<
    #  6 binary left with string

    #  <<=
    #  6 binary left with string

    # <=
    #  6 binary left with numeric

    # =
    # 12 unary with string
    #  6 binary left with numeric

    # ==
    #  6 binary left with string

    # ===
    #  6 binary left with other

    # >
    #  6 binary left with numeric

    # >=
    #  6 binary left with numeric

    # >>
    #  6 binary left with string

    # >>=
    #  6 binary left with string

    # ?
    # 12 unary with numeric, string, list
    #  2 binary left with string

    # @
    # 12 unary with co-expression
    # 11 binary left with co-expression

    # \
    # 12 unary with other
    # 11 binary left with other

    # ^
    # 12 unary with co-expression
    # 10 binary right with numeric

    # e1_to_e2
    #  4 left, binary or ternary with other

    # e1_to_e2_by_e3
    #  4 left, binary or ternary with other

    # not
    # 12 unary with other

    # op:=
    #  3 binary right other

    # |
    # 12 unary with other
    #  5 binary left with other

    # ||
    #  7 binary left with string

    # |||
    #  7 binary left with list

    # ~
    # 12 unary with cset

    # ~=
    #  6 binary left with numeric

    # ~==
    #  6 binary left with string

    # ~===
    #  6 binary left with other

    # enclosing symbols
    - symbol.brackets: "[(){}]|\\[|\\]"

    # other symbols
    - symbol: ([,;])


    # numbers
    - constant.number: "\\b[+-]?([0-9]+(\\.[0-9]+)?|\\.[0-9]+|\\.)([eE][+-]?[0-9]+)?[i]?\\b"

    # binary
    - constant.specialChar: "\\b(([0-9])+([bB])+([0-1]+))\\b"

    # hex
    - constant.specialChar: "\\\\x[A-Fa-f0-9]{2}"
    - constant.specialChar: "\\b(([0-9])+([xX])+([A-Fa-f0-9]+))\\b"

    # unicode
    - constant.specialChar: "\\\\[uU][A-Fa-f0-9]{4}"
    - constant.specialChar: "\\\\[uU][A-Fa-f0-9]{6}"

    # strings using double quote character
    - constant.string:
        start: "\""
        end: "\""
        skip: "\\\\."
        rules:
            # escape sequences
            - constant.specialChar: "\\\\([bdeflnrtv]|'|\\\"|\\\\)"
            # highlight numbers inside string
            - constant.number: "\\b[+-]?([0-9]+(\\.[0-9]+)?|\\.[0-9]+|\\.)([eE][+-]?[0-9]+)?[i]?\\b"
            # highlight binary number inside string
            - constant.specialChar: "\\b(([0-9])+([bB])+([0-1]+))\\b"
            # highlight hex number inside string
            - constant.specialChar: "\\\\x[A-Fa-f0-9]{2}"
            - constant.specialChar: "\\b(([0-9])+([xX])+([A-Fa-f0-9]+))\\b"
            # highlight unicode number inside string
            - constant.specialChar: "\\\\[uU][A-Fa-f0-9]{4}"
            - constant.specialChar: "\\\\[uU][A-Fa-f0-9]{6}"
            - constant.specialChar: "\\\\."

    #  strings using single quote character
    - constant.string:
        start: "'"
        end: "'"
        skip: "\\\\."
        rules:
            # escape sequences
            - constant.specialChar: "\\\\([bdeflnrtv]|'|\\\"|\\\\)"
            # highlight numbers inside string
            - constant.number: "\\b[+-]?([0-9]+(\\.[0-9]+)?|\\.[0-9]+|\\.)([eE][+-]?[0-9]+)?[i]?\\b"
            # highlight binary number inside string
            - constant.specialChar: "\\b(([0-9])+([bB])+([0-1]+))\\b"
            # highlight hex number inside string
            - constant.specialChar: "\\\\x[A-Fa-f0-9]{2}"
            - constant.specialChar: "\\b(([0-9])+([xX])+([A-Fa-f0-9]+))\\b"
            # highlight unicode number inside string
            - constant.specialChar: "\\\\[uU][A-Fa-f0-9]{4}"
            - constant.specialChar: "\\\\[uU][A-Fa-f0-9]{6}"
            - constant.specialChar: "\\\\."

    # firsts
    - blue: "\\b(import|initial|invocable)\\b"

    # colorize name_of; later reset 'class,procedure,record' to new color
    - brightgreen: "class +[A-Za-z0-9|_]+ *( +[A-Za-z0-9.]+)?"
    - brightgreen: "procedure +[A-Za-z0-9|_]+ *( +[A-Za-z0-9.]+)?"
    - brightgreen: "record +[A-Za-z0-9|_]+ *( +[A-Za-z0-9.]+)?"
    - brightgreen: "method +[A-Za-z0-9|_]+ *( +[A-Za-z0-9.]+)?"

    # flow
    - green: "(?i)\\b(break|by|case|of|default|create|every|do|fail)\\b"
    - green: "(?i)\\b(if|then|else|next|not|repeat|until|while|to)\\b"
    - green: "(?i)\\b(main)\\b"
    - green: "(?i)\\b(link|succeed|return)\\b"
    - red: "(?i)\\b(suspend)\\b"

    # preprocessor
    - cyan: "(?i)(\\$define|\\$undef)"
    - cyan: "(?i)(\\$if|\\$elsif|\\$else|\\$endif)"
    - cyan: "(?i)(\\$load|\\$uload)"
    - cyan: "(?i)(\\$include|\\$line|\\$error|\\$encoding)"

    # builtin functions
    - brightblue: "(?i)\\b(abs|any|back|bal|center|char|classof|clear)\\b"
    - brightblue: "(?i)\\b(coact|cocopy|cofail|collect|copy|cset)\\b"
    - brightblue: "(?i)\\b(delay|delete|detab|display|entab)\\b"
    - brightblue: "(?i)\\b(errorclear|exit|fatalerr|find|get|iand)\\b"
    - brightblue: "(?i)\\b(icom|image|insert|integer|ior|is|ishift)\\b"
    - brightblue: "(?i)\\b(ixor|key|keyof|keyval|left|list|many|map)\\b"
    - brightblue: "(?i)\\b(match|max|member|min|move|numeric|ord|pop)\\b"
    - brightblue: "(?i)\\b(pos|proc|pull|push|put|real|repl|reverse)\\b"
    - brightblue: "(?i)\\b(right|runerr|seq|serial|set|sort|sortf)\\b"
    - brightblue: "(?i)\\b(string|syserr|system|tab|table|text|trim)\\b"
    - brightblue: "(?i)\\b(type|uchar|ucs|upto|weakref|weakrefval)\\b"

    # keywords
    - magenta: "(?i)(&ascii|&break|&clock|&cset|&current|&date)"
    - magenta: "(?i)(&dateline|&digits|&dump|&errorcoexpr)"
    - magenta: "(?i)(&errornumber|&errortext|&errorvalue|&fail)"
    - magenta: "(?i)(&features|&file|&handler|&host|&lcase)\\b"
    - magenta: "(?i)(&letters|&level|&line|&main|&maxlevel|&no)"
    - magenta: "(?i)(&null|&pos|&progname|&random|&source|&subject)"
    - magenta: "(?i)(&time|&trace|&ucase|&uset|&version|&why|&yes)"

    # code blocks, field modifiers
    - magenta: "(?i)\\b(class|procedure|record|method)\\b"
    - magenta: "(?i)\\b(abstract|const|end|final|global|local|native)\\b"
    - magenta: "(?i)\\b(optional|override|package|private|protected)\\b"
    - magenta: "(?i)\\b(public|readable|static)\\b"

    # comments
    - brightcyan:
        start: "#"
        end: "$"
        rules:
            - todo: "(TODO|XXX|FIXME):?"
